reticulate::repl_python()
import pandas as pd
import plotly.graph_objects as go
# Load the data
data = pd.read_excel('data/registration_data.xlsx')
def prepare_new_energy_data(df):
new_energy_types = ['Electric (EV)', 'Plug-In Hybrid Electric (PHEV)', 'Hydrogen']
df['Total New Energy Registrations'] = df[new_energy_types].sum(axis=1)
return df[['State', 'Year', 'Total New Energy Registrations']]
def create_interactive_new_energy_chart(df):
# Summing registrations by state and sorting to get the top 10 states
top_states = df.groupby('State')['Total New Energy Registrations'].sum().nlargest(10).index
# Filtering the dataframe to keep only top 10 states
df_top = df[df['State'].isin(top_states)]
fig = go.Figure()
# Add a trace for each state in the top 10
for state in top_states:
state_data = df_top[df_top['State'] == state]
fig.add_trace(
go.Scatter(
x=state_data['Year'],
y=state_data['Total New Energy Registrations'],
mode='lines+markers',
name=state
)
)
# Update layout
fig.update_layout(
title='Top 10 States - Total New Energy Vehicle Registrations Per Year',
xaxis_title='Year',
yaxis_title='Total Registrations',
legend_title="State"
)
return fig
# Process the data and create the chart
new_energy_data = prepare_new_energy_data(data)
chart = create_interactive_new_energy_chart(new_energy_data)
chart.show()
import warnings
warnings.filterwarnings('ignore')
import pandas as pd
import plotly.graph_objects as go
def prepare_new_energy_data(df):
new_energy_types = ['Electric (EV)', 'Plug-In Hybrid Electric (PHEV)', 'Hydrogen']
df['Total New Energy Registrations'] = df[new_energy_types].sum(axis=1)
return df[['State', 'Year', 'Total New Energy Registrations']]
# Assuming data is already loaded as 'data'
new_energy_data = prepare_new_energy_data(data)
def create_interactive_new_energy_chart(df):
fig = go.Figure()
states = df['State'].unique()
for state in states:
state_data = df[df['State'] == state]
fig.add_trace(
go.Scatter(
x=state_data['Year'],
y=state_data['Total New Energy Registrations'],
mode='lines+markers',
name=state
)
)
# Creating steps for the slider
steps = []
for i, state in enumerate(states):
step = dict(
method='update',
args=[{'visible': [state == s for s in states]},
{'title': f'{state} - Total New Energy Vehicle Registrations Per Year'}],
label=state
)
steps.append(step)
sliders = [dict(
active=0,
currentvalue={"prefix": "State: "},
steps=steps
)]
fig.update_layout(
sliders=sliders,
title='Total New Energy Vehicle Registrations Per Year',
xaxis_title='Year',
yaxis_title='Total Registrations'
)
# Make the first state visible by default
for i, state in enumerate(states):
fig.data[i].visible = (i == 0)
return fig
chart = create_interactive_new_energy_chart(new_energy_data)
chart.show()
