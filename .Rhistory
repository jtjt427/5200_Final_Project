knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE)
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(readxl)
library(imputeTS)
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(readxl)
library(imputeTS)
# 选两列
covid_new = read.csv("covid_usa_Vacc_new.csv") %>% select(date,new_cases,new_vaccinations)
# 日期
covid_new$date = as.Date(covid_new$date, format ="%Y-%m-%d")
# 去0
covid_new$new_cases[covid_new$new_cases==0] = NA
# 变成ts数据，年频数据frequency为1，月频为12，周频为52或53，日频为365或365或365.25
covid.dat.ts = ts(covid_new,star =decimal_date(as.Date("2020-12-14",
format ="%Y-%m-%d")),
frequency = 365.25)
# 前向填充缺失数据
covid.dat.ts[,"new_cases"] = na_locf(covid.dat.ts[,"new_cases"],option = 'locf',na_remaining="rev")
# 后向填充缺失数据
covid.dat.ts[,"new_cases"] = na_locf(covid.dat.ts[,"new_cases"],option = 'nocb',na_remaining="rev")
# 在数据中选取了第2和3列，covid.dat.ts[,2:3]逗号前没内容表示选择所有行。T等于要分面展示
autoplot(covid.dat.ts[,2:3], facets = T) +
# x轴为日期，y没有特定标签
labs(x="Date", y="", title = "New Cases Vs New Vaccination Numbers")
autoplot(cvd.ts[,2:3], facets = T) +
labs(x="Date", y="", title = "New Cases Vs New Vaccination Numbers")
# ～左边是因变量，右边是自变量，data是包含这些数据的数据集
fit.reg <- lm(l_cases ~ l_vacc, data=cvd.ts)
summary(fit.reg)
# decimal_date() 函数将日期对象转换为十进制日期
res.fit<-ts(residuals(fit.reg),start =decimal_date(as.Date("2020-12-14",
format ="%Y-%m-%d")),
frequency = 365.25)
# decimal_date() 函数将日期对象转换为十进制日期
res.fit<-ts(residuals(fit.reg),start =decimal_date(as.Date("2020-12-14",
format ="%Y-%m-%d")),
frequency = 365.25)
ggAcf(res.fit)
acf(res.fit)
ggAcf(diff(res.fit),50) #q=0
acf(diff(res.fit))
ggPacf(diff(res.fit),50) #p=1,8
ggAcf(diff(res.fit,2),50) #q=0
ggPacf(diff(res.fit,2),50)
auto.arima(res.fit)
sarima(res.fit, 7,1,0)
sarima(res.fit, 3,1,2)
# cvd.ts[,"l_cases"]表示选用的数据是cvd.ts˙中的l_cases，xreg=cvd.ts[,"l_vacc"]是外生变量（解释变量）
fit <- Arima(cvd.ts[,"l_cases"],order=c(7,1,0),xreg=cvd.ts[,"l_vacc"])
summary(fit)
# cvd.ts[,"l_cases"]表示选用的数据是cvd.ts˙中的l_cases，xreg=cvd.ts[,"l_vacc"]是外生变量（解释变量）
fit <- Arima(cvd.ts[,"l_cases"],order=c(7,1,0),xreg=cvd.ts[,"l_vacc"])
summary(fit)
n=length(res.fit)
k=220 #1/4th of data# minimum data length for fitting a model
n-k # rest of the observations
i=1
err1 = c()
err2 = c()
for(i in 1:(n-k))
{
xtrain <- res.fit[1:(k-1)+i] #observations from 1 to 12
xtest <- res.fit[k+i] #13th observation as the test set
# 不包括漂移项，ML为最大似然估计法
fit1 <- Arima(xtrain, order=c(7,1,0),include.drift=FALSE, method="ML")
fcast1 <- forecast(fit1, h=1)# h为步长
fit2 <- Arima(xtrain, order=c(3,1,2),include.drift=FALSE, method="ML")
fcast2 <- forecast(fit2, h=1)
#capture error for each iteration
# This is mean absolute error
err1 = c(err1, abs(fcast1$mean-xtest))
err2 = c(err2, abs(fcast2$mean-xtest))
# This is mean squared error
err3 = c(err1, (fcast1$mean-xtest)^2)
err4 = c(err2, (fcast2$mean-xtest)^2)
#print(i)
}
(RMSE1=sqrt(mean(err3)))
(RMSE2=sqrt(mean(err4)))
vac_fit<-auto.arima(cvd.ts[,"l_vacc"]) #fiting an ARIMA model to the FDI variable, but please use full time series modeling rather than using auto.arima
summary(vac_fit)
fvac<-forecast(vac_fit)
fcast <- forecast(fit, xreg=fvac$mean) #fexp$mean gives the forecasted values
autoplot(fcast) + xlab("Year") +
ylab("New Cases")
vac_fit<-auto.arima(cvd.ts[,"l_vacc"]) #fiting an ARIMA model to the FDI variable, but please use full time series modeling rather than using auto.arima
summary(vac_fit)
fvac<-forecast(vac_fit)
fcast <- forecast(fit, xreg=fvac$mean) #fexp$mean gives the forecasted values
autoplot(fcast) + xlab("Year") +
ylab("New Cases")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE)
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(readxl)
library(imputeTS)
library(vars)
##### Reading Data in #########
hpi <- read.csv("DC_HPI.csv")
##### Reading Data in #########
hpi <- read.csv("Data/DC_HPI.csv")
hown <- read.csv("DC_Home_Ownership_Rate.csv")
##### Reading Data in #########
hpi <- read.csv("Data/DC_HPI.csv")
hown <- read.csv("Data/DC_Home_Ownership_Rate.csv")
mhInc <- read.csv("Data/Median_Household_Income.csv")
pop <- read.csv("Data/DC_Population.csv")
##### Reading Data in #########
hpi <- read.csv("Data/DC_HPI.csv")
hown <- read.csv("Data/DC_Home_Ownership_Rate.csv")
mhInc <- read.csv("Data/Median_Household_Income.csv")
pop <- read.csv("Data/DC_Population.csv")
View(hown)
View(hpi)
View(mhInc)
View(pop)
# Convert DATE column to year
hpi$Year <- lubridate::year(hpi$DATE)
# Aggregate quarterly data to annual
annual_hpi <- hpi %>%
group_by(Year) %>%
summarise(DCSTHPI = mean(DCSTHPI))
# Convert Year to first day of the year
annual_hpi$Year <- as.Date(paste(annual_hpi$Year, "-01-01", sep = ""), format = "%Y-%m-%d")
# Display the result
head(annual_hpi)
data <- data.frame(annual_hpi,hown$DCHOWN,mhInc$MEHOINUSDCA672N,pop$DCPOP)
colnames(data)<-c("Year", "HPI","HOwnership_Rate","Median_Income","Population")
head(data)
############################# Convert to time series object ################
data.ts<-ts(data[,2:5],start=c(1984,1), frequency = 1)
str(data.ts)
View(data)
autoplot(data[,2:5], facets = T) +
labs(x="Year", y="Value", title = "All variables together")
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(readxl)
library(imputeTS)
autoplot(data[,2:5], facets = T) +
labs(x="Year", y="Value", title = "All variables together")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE)
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(readxl)
library(imputeTS)
library(vars)
##### Reading Data in #########
hpi <- read.csv("Data/DC_HPI.csv")
hown <- read.csv("Data/DC_Home_Ownership_Rate.csv")
mhInc <- read.csv("Data/Median_Household_Income.csv")
pop <- read.csv("Data/DC_Population.csv")
# Convert DATE column to year
hpi$Year <- lubridate::year(hpi$DATE)
# Aggregate quarterly data to annual
annual_hpi <- hpi %>%
group_by(Year) %>%
summarise(DCSTHPI = mean(DCSTHPI))
# Convert Year to first day of the year
annual_hpi$Year <- as.Date(paste(annual_hpi$Year, "-01-01", sep = ""), format = "%Y-%m-%d")
# Display the result
head(annual_hpi)
#
# length(annual_hpi$DCSTHPI)
# length(hown$DCHOWN)
# length(mhInc$MEHOINUSDCA672N)
# length(pop$DCPOP)
data <- data.frame(annual_hpi,hown$DCHOWN,mhInc$MEHOINUSDCA672N,pop$DCPOP)
colnames(data)<-c("Year", "HPI","HOwnership_Rate","Median_Income","Population")
head(data)
############################# Convert to time series object ################
data.ts<-ts(data[,2:5],start=c(1984,1), frequency = 1)
str(data.ts)
autoplot(data[,2:5], facets = T) +
labs(x="Year", y="Value", title = "All variables together")
library(ggplot2)
autoplot(data[,2:5], facets = T) +
labs(x="Year", y="Value", title = "All variables together")
autoplot(data.ts[,2:5], facets = T) +
labs(x="Year", y="Value", title = "All variables together")
View(data.ts)
autoplot(data.ts[,1:4], facets = T) +
# x轴为日期，y没有特定标签
labs(x="Date", y="", title = "New Cases Vs New Vaccination Numbers")
library(vars)
library(tidyverse)
var_selection <- VARselect(data.ts, lag.max=10, type="both")
var_selection
var_model_1lags <- VAR(data.ts, p=1)
var_model_7lags <- VAR(data.ts, p=7)
summary(var_model_1lags)
summary(var_model_7lags)
var_model_1lags <- VAR(data.ts, p=1)
var_model_7lags <- VAR(data.ts, p=7)
summary(var_model_1lags)
# summary(var_model_7lags)
fit.reg <- lm(HPI ~ HOwnership_Rate, data=data.ts)
summary(fit.reg)
fit.reg1 <- lm(HPI ~ Median_Income, data=data.ts)
summary(fit.reg1)
fit.reg2 <- lm(HPI ~ Population, data=data.ts)
summary(fit.reg2)
var_model_1lags <- VAR(data.ts, p=1)
var_model_7lags <- VAR(data.ts, p=7)
var_model_7lags <- VAR(data.ts, p=8)
summary(var_model_1lags)
summary(var_model_8lags)
var_model_1lags <- VAR(data.ts, p=1)
var_model_7lags <- VAR(data.ts, p=7)
var_model_8lags <- VAR(data.ts, p=8)
summary(var_model_1lags)
summary(var_model_8lags)
var_model_1lags <- VAR(data.ts, p=1)
var_model_7lags <- VAR(data.ts, p=7)
var_model_6lags <- VAR(data.ts, p=6)
summary(var_model_1lags)
summary(var_model_6lags)
fit.reg <- lm(HPI ~ HOwnership_Rate + Median_Income +Population , data=data.ts)
summary(fit.reg)
fit.reg1 <- lm(HPI ~ HOwnership_Rate + Median_Income , data=data.ts)
summary(fit.reg1)
View(data)
res.fit<-ts(residuals(fit.reg1),start =decimal_date(as.Date("1984-01-01",
format ="%Y-%m-%d")),
frequency = 365.25)
ggAcf(res.fit)
acf(res.fit)
ggAcf(diff(res.fit),50)
acf(diff(res.fit))
ggPacf(diff(res.fit),50)
auto.arima(res.fit)
d=0
i=1
temp= data.frame()
ls=matrix(rep(NA,6*50),nrow=50) # roughly nrow = 9x3x2
for (p in c(1,2,6))# p=0,2,...,8 : 9
{
for(q in c(1,6))# q=0,1,2, :3
{
for(d in 0:1)
{
if(p-1+d+q-1<=8) #usual threshold
{
model<- Arima(res.fit,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#temp
#knitr::kable(temp)
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
d=0
i=1
temp= data.frame()
ls=matrix(rep(NA,6*50),nrow=50) # roughly nrow = 9x3x2
for (p in c(1,2,6))# p=0,2,...,8 : 9
{
for(q in c(1,6))# q=0,1,2, :3
{
for(d in 0:1)
{
if(p-1+d+q-1<=8) #usual threshold
{
model<- Arima(res.fit,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp
#temp
#knitr::kable(temp)
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
d=0
i=1
temp= data.frame()
ls=matrix(rep(NA,6*50),nrow=50) # roughly nrow = 9x3x2
for (p in c(2,3,7))# p=0,2,...,8 : 9
{
for(q in c(2,7))# q=0,1,2, :3
{
for(d in 0:1)
{
if(p-1+d+q-1<=8) #usual threshold
{
model<- Arima(res.fit,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp
#temp
#knitr::kable(temp)
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
d=0
i=1
temp= data.frame()
ls=matrix(rep(NA,6*50),nrow=50) # roughly nrow = 9x3x2
for (p in c(2,3,7))# p=0,2,...,8 : 9
{
for(q in c(2,7))# q=0,1,2, :3
{
for(d in 0:1)
{
if(p-1+d+q-1<=8) #usual threshold
{
model<- Arima(res.fit,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#temp
#knitr::kable(temp)
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
sarima(res.fit, 6,1,1)
sarima(res.fit, 1,1,1)
sarima(res.fit, 6,1,6)
sarima(res.fit, 1,0,0)
n=length(res.fit)
k=10 #1/4th of data# minimum data length for fitting a model
n-k # rest of the observations
i=1
err1 = c()
err2 = c()
err3 = c()
err4 = c()
for(i in 1:(n-k))
{
xtrain <- res.fit[1:(k-1)+i] #observations from 1 to 12
xtest <- res.fit[k+i] #13th observation as the test set
fit1 <- Arima(xtrain, order=c(6,1,1),include.drift=FALSE, method="ML")
fcast1 <- forecast(fit1, h=1)
fit2 <- Arima(xtrain, order=c(1,1,1),include.drift=FALSE, method="ML")
fcast2 <- forecast(fit2, h=1)
fit3 <- Arima(xtrain, order=c(6,1,6),include.drift=FALSE, method="ML")
fcast3 <- forecast(fit3, h=1)
fit4 <- Arima(xtrain, order=c(1,0,0),include.drift=FALSE, method="ML")
fcast4 <- forecast(fit4, h=1)
#capture error for each iteration
# This is mean squared error
err1 = c(err1, (fcast1$mean-xtest)^2)
err2 = c(err2, (fcast2$mean-xtest)^2)
err3 = c(err1, (fcast3$mean-xtest)^2)
err4 = c(err2, (fcast4$mean-xtest)^2)
#print(i)
}
(RMSE1=sqrt(mean(err1)))
(RMSE2=sqrt(mean(err2)))
(RMSE3=sqrt(mean(err3)))
(RMSE4=sqrt(mean(err4)))
fit <- Arima(data.ts[,"HPI"],order=c(7,1,0),xreg=data.ts[,2:4])
summary(fit)
vac_fit<-auto.arima(data.ts[,2:4)
vac_fit<-auto.arima(data.ts[,2:4])
fit <- Arima(data.ts[,"HPI"],order=c(1,0,0),xreg=data.ts[,2:4])
fit <- Arima(data.ts[,"HPI"],order=c(1,1,1),xreg=data.ts[,2:4])
summary(fit)
fit <- Arima(data.ts[,"HPI"],order=c(1,0,0),xreg=data.ts[,2:4])
fit <- Arima(data.ts[,"HPI"],order=c(1,1,1),xreg=data.ts[,2:4])
summary(fit)
vac_fit<-auto.arima(data.ts[,2:4])
fit <- Arima(data.ts[,"HPI"],order=c(1,0,0),xreg=data.ts[,2:3])
fit <- Arima(data.ts[,"HPI"],order=c(1,1,1),xreg=data.ts[,2:3])
summary(fit)
vac_fit<-auto.arima(data.ts[,2:3])
vac_fit<-auto.arima(data.ts[,2:3])
vac_fit<-auto.arima(data.ts[,"Median_Income"])
summary(vac_fit)
fvac<-forecast(vac_fit)
vac_fit<-auto.arima(data.ts[,"Median_Income"])
summary(vac_fit)
fvac<-forecast(vac_fit)
vac_fit<-auto.arima(data.ts[,"HOwnership_Rate"])
summary(vac_fit)
fvac<-forecast(vac_fit)
vac_fit<-auto.arima(data.ts[,"Median_Income"])
summary(vac_fit)
fMInc<-forecast(vac_fit)
vac_fit<-auto.arima(data.ts[,"HOwnership_Rate"])
summary(vac_fit)
fhown<-forecast(vac_fit)
fcast <- forecast(fit, xreg=fhown$mean)
fcast <- forecast(fit, xreg=fhown$mean+fMInc$mean)
var_model_1lags <- VAR(data.ts, p=1)
var_model_2lags <- VAR(data.ts, p=2)
var_model_7lags <- VAR(data.ts, p=7)
var_model_6lags <- VAR(data.ts, p=6)
summary(var_model_1lags)
summary(var_model_2lags)
summary(var_model_6lags)
fcast <- forecast(fit, xreg=cbind(fhown$mean, fMInc$mean) )
autoplot(fcast) + xlab("Year") +
ylab("Values")
fit <- Arima(data.ts[,"HPI"],order=c(1,0,0),xreg=data.ts[,2:3])
fit <- Arima(data.ts[,"HPI"],order=c(1,1,1),xreg=data.ts[,2:3])
summary(fit)
library(reticulate)
repl_python()
py_install("openpyxl")
py_install("plotly")
library(reticulate)
repl_python()
library(reticulate)
repl_python()
